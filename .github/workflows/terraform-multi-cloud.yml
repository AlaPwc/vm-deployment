
name: "Terraform Multi-Cloud Deployment"

on:
  workflow_dispatch:
    inputs:
      enable_azure:
        description: "Deploy to Azure?"
        required: true
        default: "true"
      enable_aws:
        description: "Deploy to AWS?"
        required: true
        default: "false"

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENABLE_AZURE: ${{ github.event.inputs.enable_azure }}
      ENABLE_AWS: ${{ github.event.inputs.enable_aws }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Configure AWS credentials
   # - name: Configure AWS credentials
     # uses: aws-actions/configure-aws-credentials@v2
     # with:
     #   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #  aws-region: eu-central-1 

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./modules/AWS

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./modules/AWS

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
     # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
     # run: terraform apply 

  #  - name: Terraform Apply
  #       #if: github.event_name == 'push' # Run apply only on push events
  #    run: terraform apply -input=false -auto-approve
  #    working-directory: ./modules/AWS

name: "Terraform"

on:
  workflow_dispatch:  # ✅ Required for API triggers

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      # ✅ Checkout Repository
      - name: Checkout
        uses: actions/checkout@v4

      # ✅ Setup Terraform with Token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # ✅ Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1 

      # ✅ Print Branch Name
      - name: Print Branch Name
        run: echo "Deploying from branch ${{ github.ref }}"

      # ✅ Stream Logs to API (Fixes Indentation)
      - name: Stream Logs to API
        run: |
          mkfifo tf_logs 
          tail -f tf_logs | while read line; do
            curl -X POST "https://postman-echo.com/post" \
                 -H "Content-Type: application/json" \
                 -d "{\"log\": \"$line\"}" &
          done &

          terraform init -no-color 2>&1 | tee tf_logs
          terraform plan -no-color 2>&1 | tee -a tf_logs
          terraform apply -auto-approve -no-color 2>&1 | tee -a tf_logs
        working-directory: ./modules/AWS  # ✅ Now correctly placed


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
   # - name: Terraform Init
    #  run: terraform init
   #   working-directory: ./modules/AWS

    # Checks that all Terraform configuration files adhere to a canonical format
   # - name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    #- name: Terraform Plan
    #  run: terraform plan -input=false
      # working-directory: ./modules/AWS

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
     # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
     # run: terraform apply 

  #  - name: Terraform Apply
  #       if: github.event_name == 'push'  Run apply only on push events
  #    run: terraform apply -input=false -auto-approve
  #    working-directory: ./modules/AWS
